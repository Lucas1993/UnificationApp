#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
module RUNIFY
  class Parser < Racc::Parser

module_eval(<<'...end Parser.y/module_eval...', 'Parser.y', 29)

	def initialize tokenizer
		@tokenizer = tokenizer
		super()
	end

	def next_token
		@tokenizer.next_token
	end

	def parse
		do_parse
	end
...end Parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,     9,    10,    11,    12,    13,     7,     7,     7,    18,
    19,     7 ]

racc_action_check = [
     0,     1,     3,     4,     8,     9,    10,    11,    12,    16,
    17,    19 ]

racc_action_pointer = [
    -2,     1,   nil,    -5,    -2,   nil,   nil,   nil,     1,     5,
     4,     5,     6,   nil,   nil,   nil,     5,     4,   nil,     9,
   nil ]

racc_action_default = [
   -12,   -12,    -1,    -2,   -12,    -5,    -6,    -7,    -8,   -12,
   -12,   -12,   -12,    21,    -3,    -4,   -12,   -10,    -9,   -12,
   -11 ]

racc_goto_table = [
     2,    15,    17,     1,    16,   nil,   nil,   nil,   nil,    17,
    14,    20 ]

racc_goto_check = [
     2,     4,     4,     1,     8,   nil,   nil,   nil,   nil,     4,
     2,     8 ]

racc_goto_pointer = [
   nil,     3,     0,   nil,   -10,   nil,   nil,   nil,    -8 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     8,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 9, :_reduce_1,
  1, 10, :_reduce_2,
  3, 10, :_reduce_3,
  3, 11, :_reduce_4,
  1, 12, :_reduce_5,
  1, 12, :_reduce_6,
  1, 15, :_reduce_none,
  1, 13, :_reduce_8,
  4, 14, :_reduce_9,
  1, 16, :_reduce_10,
  3, 16, :_reduce_11 ]

racc_reduce_n = 12

racc_shift_n = 21

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :LPAREN => 3,
  :RPAREN => 4,
  :EQUAL => 5,
  :COMMA => 6,
  :SEPARATOR => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "LPAREN",
  "RPAREN",
  "EQUAL",
  "COMMA",
  "SEPARATOR",
  "$start",
  "problem_set",
  "equations",
  "equation",
  "term",
  "var",
  "fun",
  "label",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'Parser.y', 3)
  def _reduce_1(val, _values, result)
     val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 5)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 6)
  def _reduce_3(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 8)
  def _reduce_4(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 11)
  def _reduce_5(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 12)
  def _reduce_6(val, _values, result)
    result = val[0]
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'Parser.y', 17)
  def _reduce_8(val, _values, result)
     result = VTerm.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 19)
  def _reduce_9(val, _values, result)
     result = FTerm.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 22)
  def _reduce_10(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 23)
  def _reduce_11(val, _values, result)
     result = [val[0]] + val[2] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module RUNIFY
